// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// tsolveAndMultiply
Eigen::MatrixXd tsolveAndMultiply(const Eigen::MatrixXd& A, const Eigen::MatrixXd& C);
RcppExport SEXP _gfimm_tsolveAndMultiply(SEXP ASEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(tsolveAndMultiply(A, C));
    return rcpp_result_gen;
END_RCPP
}
// nullSpace
Rcpp::List nullSpace(const Eigen::MatrixXd M);
RcppExport SEXP _gfimm_nullSpace(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(nullSpace(M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gfimm_tsolveAndMultiply", (DL_FUNC) &_gfimm_tsolveAndMultiply, 2},
    {"_gfimm_nullSpace", (DL_FUNC) &_gfimm_nullSpace, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gfimm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
